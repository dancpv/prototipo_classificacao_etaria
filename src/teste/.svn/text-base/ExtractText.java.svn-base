package teste;

/* SO executar esta classe!! */
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.htmlparser.jericho.Element;
import net.htmlparser.jericho.HTMLElementName;
import net.htmlparser.jericho.MasonTagTypes;
import net.htmlparser.jericho.MicrosoftConditionalCommentTagTypes;
import net.htmlparser.jericho.PHPTagTypes;
import net.htmlparser.jericho.Source;

public class ExtractText {
	private List<Element> linkElements;
	public static String url;
	public static String dir;
	private Map<String, Map<String, Integer>> maps;
	OpenRelatedFiles openRelatedFilesObject = new OpenRelatedFiles();
	VerifyExtractText verifyExtractTextObject = new VerifyExtractText();
	private static final int MIN_WORD_SIZE = 3;
	private static final int MAX_WORD_SIZE = 2;

	public ExtractText() {
	}

	public String getUrl() {
		return url;
	}

	public String getDir() {
		return dir;
	}

	public void execute() {
		try {
			maps = openRelatedFilesObject.getMaps();
			scanURL();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void scanURL() throws IOException, MalformedURLException {
		MicrosoftConditionalCommentTagTypes.register();
		PHPTagTypes.register();
		PHPTagTypes.PHP_SHORT.deregister();
		MasonTagTypes.register();
		List<String> links = scanMainURL(url);
		scanRelatedURL(links);
	}

	private List<String> scanMainURL(String sourceUrlString)
			throws MalformedURLException, IOException {
		List<String> links = new ArrayList<String>();
		Source source = new Source(new URL(sourceUrlString));
		source.fullSequentialParse();
		linkElements = source.getAllElements(HTMLElementName.A);

		for (Element linkElement : linkElements) {
			String href = linkElement.getAttributeValue("href");
			if (href == null)
				continue;

			if (href.startsWith("/"))
				href = sourceUrlString + href;
			links.add(href);
		}

		int contadorPalavrasUrlPrincipal = countWords(source);
		System.out.println(contadorPalavrasUrlPrincipal + " main");
		System.out.println(maps + " map main");
		calculaPorcentagem(maps, contadorPalavrasUrlPrincipal);

		return links;
	}

	private int countWords(Source source) {
		int contador = 0;
		String[] list = source.getRenderer().toString().toUpperCase()
				.split(" ");

		int tamanho = 0;
		for (Map<String, Integer> map : maps.values()) {
			Set<String> chaves = map.keySet();
			for (String chave : chaves) {
				tamanho = chave.length();
				for (String word : list) {
					contador++;
					String cleanWord = cleanWord(word);
					if (!cleanWord.isEmpty() && cleanWord.length() == tamanho
							&& !isTag(cleanWord)) {
						System.out.println(cleanWord + " palavra de tamanho igual a do txt.");
						verifyExtractTextObject.verifyMaps(cleanWord, maps);
					}
				}
			}
		}
		return contador;
	}

	private boolean isTag(String cleanWord) {
		return cleanWord.startsWith("<") || cleanWord.startsWith("HTTP");
	}

	private String cleanWord(String word) {
		String cleanWord = word.replaceAll("[^\\p{L}\\p{N}]", "");
		return cleanWord.trim();
	}

	private void scanRelatedURL(List<String> array) {
		int contadorPalavrasUrlRelacionadas = 0;
		for (String link : array) {
			Source codigo = null;
			link = checkedLink(link);
			System.out.println(link + " LINK RELATED");
			try {
				codigo = new Source(new URL(link));
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (codigo != null)
				contadorPalavrasUrlRelacionadas += countWords(codigo);
		}
		System.out.println(contadorPalavrasUrlRelacionadas + " related");
		System.out.println(maps + " map related");
		calculaPorcentagem(maps, contadorPalavrasUrlRelacionadas);
	}

	private String checkedLink(String link) {
		if (link.startsWith("www"))
			link = "http://" + link;
		return link;
	}

	public void calculaPorcentagem(Map<String, Map<String, Integer>> maps,
			double contador_palavras) {
		for (Map<String, Integer> map : maps.values()) {
			Set<String> chaves = map.keySet();
			for (String chave : chaves) {
				double valor = map.get(chave);
				double porcentagem = ((valor * 100.0) / contador_palavras);
				System.out.println("A palavra: " + chave + " corresponde a "
						+ porcentagem + "% de " + contador_palavras);
			}
		}
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 2)
			System.out.println("Parametros faltando: url_scan");
		else {
			url = args[0];
			dir = args[1];
			ExtractText extractText = new ExtractText();
			extractText.execute();
		}
	}

}
